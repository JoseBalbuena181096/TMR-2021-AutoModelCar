// Generated by gencpp from file object_detection/points_objects.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_MESSAGE_POINTS_OBJECTS_H
#define OBJECT_DETECTION_MESSAGE_POINTS_OBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace object_detection
{
template <class ContainerAllocator>
struct points_objects_
{
  typedef points_objects_<ContainerAllocator> Type;

  points_objects_()
    : points()
    , another_field(0)  {
    }
  points_objects_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , another_field(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef uint8_t _another_field_type;
  _another_field_type another_field;





  typedef boost::shared_ptr< ::object_detection::points_objects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection::points_objects_<ContainerAllocator> const> ConstPtr;

}; // struct points_objects_

typedef ::object_detection::points_objects_<std::allocator<void> > points_objects;

typedef boost::shared_ptr< ::object_detection::points_objects > points_objectsPtr;
typedef boost::shared_ptr< ::object_detection::points_objects const> points_objectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection::points_objects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection::points_objects_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detection::points_objects_<ContainerAllocator1> & lhs, const ::object_detection::points_objects_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.another_field == rhs.another_field;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detection::points_objects_<ContainerAllocator1> & lhs, const ::object_detection::points_objects_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::points_objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::points_objects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::points_objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::points_objects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::points_objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::points_objects_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection::points_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52b7cc5e44032cacb08a65980d276cc0";
  }

  static const char* value(const ::object_detection::points_objects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52b7cc5e44032cacULL;
  static const uint64_t static_value2 = 0xb08a65980d276cc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection::points_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection/points_objects";
  }

  static const char* value(const ::object_detection::points_objects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection::points_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] points\n"
"uint8 another_field\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::object_detection::points_objects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection::points_objects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.another_field);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct points_objects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection::points_objects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection::points_objects_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "another_field: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.another_field);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_MESSAGE_POINTS_OBJECTS_H
